generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int      @id @default(autoincrement())
  login            String   @unique
  username         String   @unique
  hash             String?
  logFrom42        Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  avatar           String?
  twoFactorEnabled Boolean  @default(false)
  twoFactorAuthSecret  String?
  friends          Int[]    @default([])
  stat             Stat     @relation(fields: [statId], references: [id])
  statId           Int      @unique
  notifications    Notification[]
  matchesAsWinner  Match[]  @relation("Winner")
  matchesAsLoser   Match[]  @relation("Loser")
  messages         Message[]
  chats            ChatUser[]
  bans             Ban[]
  mutes            Mute[]
}

model Match {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  winner     User      @relation("Winner", fields: [winnerName], references: [username])
  loser      User      @relation("Loser", fields: [loserName], references: [username])
  winnerName String
  loserName  String
}

model Notification {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  type	    String
  user      User      @relation(fields: [userId], references: [id])
  sender    String    @default("system")
  userId   	Int
  @@unique([userId, sender, type])
}

model Stat {
  id     Int  @id @default(autoincrement())
  wins   Int  @default(0)
  losses Int  @default(0)
  elo    Int  @default(1000)
  ladder String @default("bronze")

  user   User?
}

model Message {
  id          Int      @id @default(autoincrement())
  content     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      Int
  chatId      Int

  user        User     @relation(fields: [userId], references: [id])
  chat        Chat     @relation(fields: [chatId], references: [id])
}

model Chat {
  id             Int       @id @default(autoincrement())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  name           String
  isGroupChat    Boolean   @default(false)
  accessibility  String    @default("public")
  password       String?

  messages       Message[]
  chatUsers      ChatUser[]
  bans           Ban[]
  mutes          Mute[]
}

model Role {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  chatUsers ChatUser[]
}

model ChatUser {
  id               Int      @id @default(autoincrement())
  userId           Int
  chatId           Int
  createdAt        DateTime @default(now())
  lastReadMessageId Int?
  roleId           Int      @default(2)

  user             User     @relation(fields: [userId], references: [id])
  chat             Chat     @relation(fields: [chatId], references: [id])
  role             Role     @relation(fields: [roleId], references: [id])

  @@unique([userId, chatId])
}

model Ban {
  chatId         Int
  userId         Int
  createdAt      DateTime  @default(now())
  expiresAt      DateTime?

  chat           Chat  @relation(fields: [chatId], references: [id])
  user           User  @relation(fields: [userId], references: [id])

  @@id([chatId, userId])
}

model Mute {
  chatId         Int
  userId         Int
  createdAt      DateTime  @default(now())
  expiresAt      DateTime?

  chat           Chat  @relation(fields: [chatId], references: [id])
  user           User  @relation(fields: [userId], references: [id])

  @@id([chatId, userId])
}
