generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int            @id @default(autoincrement())
  login               String         @unique @db.VarChar(25)
  username            String         @unique @db.VarChar(25)
  hash                String?
  logFrom42           Boolean        @default(false)
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  twoFactorEnabled    Boolean        @default(false)
  twoFactorAuthSecret String?

  settings            Settings?
  stat                Stat?
  chatStatus          ChatStatus[]
  groupMessage		  GroupMessage[]
  participant	      GroupParticipant[]
  matchesAsLoser      Match[]         @relation("Loser")
  matchesAsWinner     Match[]         @relation("Winner")
  messagesSend 		  Message[]	      @relation("sender")
  messagesReceived 	  Message[]	      @relation("receiver")
  source              Relationship[]  @relation("user1")
  destination         Relationship[]  @relation("user2")
  userNotif		      Notification[]  @relation("user")
  senderNotif		  Notification[]  @relation("sender")

}

// create table relationship instead with status ( pending, accepted, blocked, mute )

model Match {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())

  loserId  	  Int
  winnerId    Int
  scoreWinner Int
  scoreLoser  Int
  loser       User     @relation("Loser", fields: [loserId], references: [id])
  winner      User     @relation("Winner", fields: [winnerId], references: [id])
}

model Relationship {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  type       String

  user1Id  	 Int
  user2Id  	 Int
  user1      User     @relation("user1", fields: [user1Id], references: [id])
  user2      User     @relation("user2",fields: [user2Id], references: [id])
  @@unique([user1Id, user2Id, type])
}

model Notification {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  type       String

  senderId   Int
  userId     Int
  user       User     @relation("user", fields: [userId], references: [id])
  sender     User     @relation("sender", fields: [senderId], references: [id])
  @@unique([userId, senderId, type])
}

model Stat {
  id     Int    @id @default(autoincrement())
  wins   Int    @default(0)
  losses Int    @default(0)
  elo    Int    @default(1000)
  ladder String @default("silver")

  userId Int    @unique // relation scalar field (used in the `@relation` attribute above)
  user   User   @relation(fields: [userId], references: [id])
}

model Settings {
  id              Int    @id @default(autoincrement())
  up              String @default("ArrowUp")
  down            String @default("ArrowDown")
  backgroundColor String @default("#000000")
  objectsColor    String @default("#ffffff")
  textColor       String @default("#ffffff")

  userId Int      @unique // relation scalar field (used in the `@relation` attribute above)
  user   User     @relation(fields: [userId], references: [id])
}

model Message {
  id        	Int      @id @default(autoincrement())
  content   	String
  createdAt 	DateTime @default(now())

  receiverId 	Int
  senderId 	    Int
  sender        User     @relation("sender", fields: [receiverId], references: [id])
  receiver      User     @relation("receiver", fields: [senderId], references: [id])
}


// public password ???
model Chat {  // group chat
	id            Int        @id @default(autoincrement())

	createdAt     DateTime   @default(now())
	updatedAt     DateTime   @updatedAt
	name          String     @unique @db.VarChar(30)
	accessibility String     @default("public")
	password      String?

	messages      GroupMessage[]
	restriction   ChatStatus[]
	participant	  GroupParticipant[]
}

model GroupParticipant {
	chatId    	  Int
	userId    	  Int
	chat          Chat      @relation(fields: [chatId], references: [id])
	user          User      @relation(fields: [userId], references: [id])
	@@id([chatId, userId])
}

model GroupMessage {
	id            Int        @id @default(autoincrement())
	createdAt     DateTime   @default(now())
	updatedAt     DateTime   @updatedAt

	content       String
	chatId    	  Int
	userId    	  Int
	chat          Chat      @relation(fields: [chatId], references: [id])
	user          User      @relation(fields: [userId], references: [id])
}

model ChatStatus {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  expiresAt DateTime
  status    String     @default("default") // admin / ban /mute

  chatId    Int
  userId    Int
  chat      Chat       @relation(fields: [chatId], references: [id])
  user      User       @relation(fields: [userId], references: [id])

// @@id([chatId, userId])
}

//model Message {
//  id        Int      @id @default(autoincrement())
//  content   String
//  createdAt DateTime @default(now())
//  updatedAt DateTime @updatedAt
//  userId    Int
//  chatId    Int
//  chat      Chat     @relation(fields: [chatId], references: [id])
//  user      User     @relation(fields: [userId], references: [id])
//}

//model ChatRole {
//  id        Int        @id @default(autoincrement())
//  name      String     @unique
//  chatUsers ChatUser[]
//}

//model ChatUser {
//  id                Int      @id @default(autoincrement())
//  userId            Int
//  chatId            Int
//  createdAt         DateTime @default(now())
//  lastReadMessageId Int?
//  roleId            Int      @default(2)
//  chat              Chat     @relation(fields: [chatId], references: [id])
//  role              Role     @relation(fields: [roleId], references: [id])
//  user              User     @relation(fields: [userId], references: [id])

//  @@unique([userId, chatId])
//}

//model Mute {
//  chatId    Int
//  userId    Int
//  createdAt DateTime  @default(now())
//  expiresAt DateTime?
//  chat      Chat      @relation(fields: [chatId], references: [id])
//  user      User      @relation(fields: [userId], references: [id])

//  @@id([chatId, userId])
//}

//model Block {
//  id        Int      @id @default(autoincrement())
//  createdAt DateTime @default(now())
//  blockerId Int
//  blockedId Int
//  blocker   User     @relation("blockerToBlocks", fields: [blockerId], references: [id])
//}
