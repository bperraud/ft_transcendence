generator client {
  	provider = "prisma-client-js"
}

datasource db {
	provider = "postgresql"
	url      = env("DATABASE_URL")
}

model User {
	id                  Int            @id @default(autoincrement())
	login               String         @unique @db.VarChar(25)
	username            String         @unique @db.VarChar(25)
	hash                String?
	logFrom42           Boolean        @default(false)
	createdAt           DateTime       @default(now())
	updatedAt           DateTime       @updatedAt
	twoFactorEnabled    Boolean        @default(false)
	twoFactorAuthSecret String?

	settings            Settings?
	stat                Stat?
	participant	        UserChatRelationship[]
	messagesSend 		Message[]
	matchesAsLoser      Match[]         @relation("Loser")
	matchesAsWinner     Match[]         @relation("Winner")
	source              Relationship[]  @relation("user1")
	destination         Relationship[]  @relation("user2")
	userNotif		    Notification[]  @relation("user")
	senderNotif		    Notification[]  @relation("sender")
}

model Match {
	id          Int      @id @default(autoincrement())
	createdAt   DateTime @default(now())

	loserId  	Int
	winnerId    Int
	scoreWinner Int
	scoreLoser  Int
	loser       User     @relation("Loser", fields: [loserId], references: [id])
	winner      User     @relation("Winner", fields: [winnerId], references: [id])
}

model Relationship {
	id         Int      @id @default(autoincrement())
	createdAt  DateTime @default(now())
	type       Relation

	user1Id    Int
	user2Id    Int
	user1      User     @relation("user1", fields: [user1Id], references: [id])
	user2      User     @relation("user2", fields: [user2Id], references: [id])
	@@unique([user1Id, user2Id, type])
}

enum Relation {
  FRIEND
}

model Notification {
	id         Int      @id @default(autoincrement())
	createdAt  DateTime @default(now())
	type       Notif

	senderId   Int
	userId     Int
	user       User     @relation("user", fields: [userId], references: [id])
	sender     User     @relation("sender", fields: [senderId], references: [id])
	@@unique([userId, senderId, type])
}

enum Notif {
  GAME
  FRIEND
}

model Stat {
	id     Int    @id @default(autoincrement())
	wins   Int    @default(0)
	losses Int    @default(0)
	elo    Int    @default(1000)
	ladder Rank   @default(BRONZE)

	userId Int    @unique // relation scalar field (used in the `@relation` attribute above)
	user   User   @relation(fields: [userId], references: [id])
}

enum Rank {
  BRONZE
  SILVER
  GOLD
  PLATINUM
  DIAMOND
}

model Settings {
	id              Int    @id @default(autoincrement())
	up              String @default("ArrowUp")
	down            String @default("ArrowDown")
	backgroundColor String @default("#000000")
	objectsColor    String @default("#ffffff")
	textColor       String @default("#ffffff")

	userId Int      @unique // relation scalar field (used in the `@relation` attribute above)
	user   User     @relation(fields: [userId], references: [id])
}

model Message {
	id        	Int     	@id @default(autoincrement())
	content   	String
	createdAt 	DateTime	@default(now())

	chatId    	  Int
	senderId   	  Int
	chat          Chat      @relation(fields: [chatId], references: [id], onDelete: Cascade)
	sender        User      @relation(fields: [senderId], references: [id])
}

// public password ???
model Chat {
	id            Int        @id @default(autoincrement())

	createdAt     DateTime   @default(now())
	name          String?    @db.VarChar(30)
	accessibility Access     @default(PRIVATE)
	password      String?
	messages      Message[]
	participant	  UserChatRelationship[]
}

enum Access {
  PUBLIC
  PRIVATE
  PROTECTED
}

model UserChatRelationship {
	id            Int        @id @default(autoincrement())
	createdAt 	  DateTime       @default(now())
	expiresAt 	  DateTime       @default(now())
	role      	  Role           @default(USER)

	chatId    	  Int
	userId    	  Int
	chat          Chat       @relation(fields: [chatId], references: [id], onDelete: Cascade)
	user          User       @relation(fields: [userId], references: [id])
	@@unique([userId, chatId])
}

enum Role {
  USER
  ADMIN
  BAN
  MUTE
}
